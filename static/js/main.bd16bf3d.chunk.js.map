{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","broder","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSeachBox","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACI,4BAAKL,GACL,2BAAIC,MCaLK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIrB,OACI,6BACKO,ICDEK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACAA,UAAY,mCACZY,KAAO,SACPC,YAAY,gBACZC,SAAUH,MCCPI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,sFAEJG,KAAKX,MAAMK,a,GAhBCQ,aCiFZC,E,kDApEX,aAAe,IAAD,8BACV,gBAwBJC,WAAa,SAACC,GAEV,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAxB1C,EAAKZ,MAAQ,CAITnB,OAAQ,GACR6B,YAAa,IARP,E,gEAYO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAc3B,MAI2Bb,KAAKJ,MAA7BnB,EAJH,EAIGA,OAAQ6B,EAJX,EAIWA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAgBzD,OAAQxC,EAAO0C,OACX,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,aAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OANV,wBAAIzC,UAAU,MAAd,8B,GAzDd6B,aCAEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.bd16bf3d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n//pure component, only need to know stuff for their own function\n//props never change\nconst CardList = ({ robots }) => {\n    const cardsArray = robots.map((user, i) => {\n        return (<Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email} \n        />\n        );\n    })\n    return (\n        <div>\n            {cardsArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input\n            className = 'pa3 ba b--green bg-lightest-blue' \n            type = 'search' \n            placeholder='Search robots' \n            onChange={searchChange}\n            /> \n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', broder: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h2>Ooops. Something went wrong... Please try again later.</h2>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n//import { robots } from './robots'; //demo\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nconst state = {\n\n}\n\nclass App extends Component {\n    //you need a constructor if you want to use this.state\n    //what affects your app\n    constructor() {\n        super()\n        //you must call super() to use this.\n        this.state = {\n            //this that can change and affect app\n            //live in parent component that passes state to different components\n            //robots: robots, for demo\n            robots: [],\n            searchField: '' //smart components\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => {\n                return response.json();\n            })\n            .then(users => {\n                this.setState({ robots: users })\n            })\n\n    }\n    //can add your own functions BUT use arrow functions \n    //so instead of onSeachBox(event) {\n    //console.log(event.target.value);//always use event.target.value\n    onSeachBox = (event) => {\n        //React rule, use:\n        this.setState({ searchField: event.target.value })\n\n    }\n\n\n    render() {\n        // const filteredRobots = this.state.robots.filter(robot => {\n        //     return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        // }) //before destructure\n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        //create filteredRobots here to use it as props\n        // if (!robots.length) {\n        //     return <h2 className='tc'>Loading please wait...</h2>\n        // } else {\n        //     return (\n        //         <div className='tc'>\n        //             <h1 className='f2'>RoboFriends</h1>\n        //             <SearchBox searchChange={this.onSeachBox} />\n        //             <Scroll> \n        //                 <CardList robots={filteredRobots} />\n        //             </Scroll>\n        //         </div>\n        //     );\n        // }\n        return !robots.length ? <h2 className='tc'>Loading please wait...</h2> : (\n            <div className='tc'>\n                <h1 className='f2'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSeachBox} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport CardList from './components/CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots'; demo\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Card />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}